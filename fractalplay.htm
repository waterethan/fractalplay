<html>
<head><title>fractalplay</title></head>
<body>

Color: <select onchange="changeColor(this);">
 <option value="red">Red</option>
 <option value="green">Green</option>
 <option value="blue">Blue</option>
 <option value="magenta" selected>Magenta</option>
 <option value="orange">Orange</option>
 <option value="yellow">Yellow</option>
 <option value="white">White</option>
</select>

r<input type="number" id="red1" size="1" value="255" min="0" max="255"> g<input type="number" id="green1" size="1" value="0" min="0" max="255">b<input type="number" id="blue1" size="1" value="255" min="0" max="255">

Algorithm <select onchange="changeAlgorithm(this);"  >
 <option value="mandelbrot">Mandelbrot Set</option>
 <option value="julia1">Julia (phi-2, phi-1)</option>
 <option value="plasma">Diamond Square</option>
 <option value="terrain">Midpoint Displacement</option>
 <option value="tricorn">Tricorn (Mandelbrot -1)</option>
 <option value="julia2">Julia (1-phi, 0)</option>
 <option value="julia3">Julia (0.285, 0)</option>
 <option value="julia4">Julia (0.285, 0.01)</option>
 <option value="julia5">Julia (-0.835, -0.2321)</option>
 
</select>
Type: <select id ="changeType" onchange="changeType(this);">
 <option value="smoothe" >Smoothe</option>
 <option value="normal" selected>Normal</option>
 <option value="sandbox" >Sandbox</option>
</select>


<div id='renderTimes'></div>

Size: <input id='size' type='number' min='10' max='1000' size='3' value='200'>		

Scale: <select onchange="changeZoom(this);">
 <option value="10">0.1</option>
 <option value="50">0.5</option>

 <option value="100" selected>1 </option>
 <option value="125">1.25</option>
 <option value="135">1.35</option>
</select>

X: <input type="number" id="scaleX1" value="100" size="1">
Y: <input type="number" id="scaleY1" value="100" size="1">

Crop: <select onchange="crop(this);">
 <option value="0" selected>0</option>
 <option value="2">2</option>
 <option value="3">3 </option>
 <option value="4">4</option>
 <option value="5">5</option>
 <option value="6">6</option>
 <option value="7">7</option>
 <option value="10">10</option>
 <option value="-1">-1</option>
 <option value="-2">-2</option>
 <option value="-3">-3 </option>
 <option value="-4">-4</option>
 <option value="-5">-5</option>
 <option value="-6">-6</option>
 <option value="-7">-7</option>
 <option value="-10">-10</option>
</select>

Rotate: <input type="number" id="rotation" min='0' max='359' value="0" size="1">

<select onchange="rotate(this);">
 <option value="0" selected>0</option>
 <option value="45">45</option>
 <option value="90">90</option>
 <option value="135">135 </option>
 <option value="180">180</option>
 <option value="225">215</option>
 <option value="270">270</option>
 <option value="315">315</option>
</select>
<br>


scalars: <input type="text" id="scalarA1" size="1"><input type="text" id="scalarB1" size="1"><input type="text" id="scalarC1" size="1"><input type="text" id="scalarD1" size="1"><input type="text" id="scalarj" size="1"><input type="text" id="scalarj1" size="1"><input type="text" id="scalarj2" size="1">
<input id ="testOne" type="button" value="Render" onClick="goDefault();ready();go();"></br>
		
<canvas id="canvas" width="400" height="200">
    HTML5 Canvas not supported.
</canvas>

<canvas id="plasma" width="200" height="200">
    HTML5 Canvas not supported.
</canvas>

<script language="javascript" src="fractals.js" type="text/javascript"></script>

<script type="text/javascript">
/*
* Copyright (c) 2012 Ethan Gutierrez.
*
*  This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/		
		
		
// Comment this out if using jquery. 		
 $ = function(id)
 { return document.getElementById(id)}
 
		var canvas = $('canvas'),
				ctx = canvas.getContext('2d'),
				zoom = 200,
				size = $('size'),
				test1 = new Fractal(size.value),
				test = new Fractal(size.value),
				xi = $('scaleX1'),
				yi = $('scaleY1'),
				ri = $('red1'),
				gi = $('green1'),
				bi = $('blue1'),
				aS = $('scalarA1'),
				bS = $('scalarB1'),
				cS = $('scalarC1'),
				dS = $('scalarD1'),
				j = $('scalarj'),
				j1 = $('scalarj1'),
				j2 = $('scalarj2'),
				renders = $('renderTimes');


ready = function()
{	  var sv = parseInt(size.value);
		test1.canvas.height = sv;
	  test1.canvas.width = sv;	
		canvas.height = sv;
		canvas.width = sv * 2;
		//ctx.fillRect(0, 0, sv, sv * 2);
		test1.scale(parseFloat(xi.value),parseFloat(yi.value));
		test1.toRGB(parseInt(ri.value),parseInt(gi.value),parseInt(bi.value));
		test1.scalar.a = parseFloat(aS.value);
		test1.scalar.b = parseFloat(bS.value);
		test1.scalar.c = parseFloat(cS.value);
		test1.scalar.d = parseFloat(dS.value);
		test1.j = parseFloat(j.value);
		test1.j1 = parseFloat(j1.value);
		test1.j2 = parseFloat(j2.value);
		test1.rotation = parseFloat(rotation.value);

		
		//plasma.init('plasma',200,200,20,1);
		
};

showRenders = function()
{var generate1 = test1.lastRender + test1.lastStroke,
			generate = test.lastRender + test.lastStroke;
		renders.innerHTML = 'Render times (generate/texture) Last:'
		 + generate1
			+'  (' + test1.lastRender
			 + '/' + test1.lastStroke
				+ ') Default:' + generate
				 + '  (' + test.lastRender
					+ '/' + test.lastStroke + ')';
}

go = function()
{ 
 		test1.render();
		showRenders(); 
		test1.draw();
		test.draw(ctx,parseInt(size.value));
}

 

initTest1 = function ()
{		xi.value = yi.value = 100;
		aS.value = bS.value = cS.value = dS.value = 1;
		j.value = 1;
		j1.value = j2.value = 0;
		test1 = new Fractal;
		test = new Fractal(parseInt(size.value));
}

goDefault = function()
{
test.canvas.height = parseInt(size.value);
test.canvas.width = parseInt(size.value);
test.render();
showRenders();
}

initTest1();
goDefault();
ready();
go();




canvas.onclick = function(e)
{
 goDefault();
 ready();go();
}


function changeZoom(sel)
{
	var opt = sel.options[sel.selectedIndex];
	zoom = parseFloat(opt.value);
	xi.value = yi.value = zoom;
ready();go();
}

function crop(sel)
{
	var opt = sel.options[sel.selectedIndex];
	test1.crop = parseFloat(opt.value);
	if (opt.value < 0)
	{	ready();
		go();
	} else
	{	test1.stroke();
		test1.draw();
		showRenders();
	}
}

function rotate(sel)
{
	var opt = sel.options[sel.selectedIndex];
	rotation.value = parseFloat(opt.value);
	
ready();go();
}

function changeType(sel)
{	var algorithmType = sel.options[sel.selectedIndex].value;
	var algo = test.algorithm;
	if (typeof algo[algorithmType] != 'undefined')
	{	test1.algo = algorithmType;
		test.algo = algorithmType;
		goDefault();
		ready();go();
	} else
	{	test1.algo = 'normal';
		test.algo = 'normal';
		goDefault();
		ready();go();

	}
}


function changeColor(sel)
{
	var color = sel.options[sel.selectedIndex].value;
	if (color == "red") { 	ri.value=255; gi.value=0; bi.value=0;}
  else if (color == "green") { ri.value=0; gi.value=255; bi.value=0;}
	else if (color == "blue")  { ri.value=0; gi.value=0; bi.value=255;}
	else if (color == "magenta")  { ri.value=255; gi.value=0; bi.value=255;}
	else if (color == "orange")	{ri.value=255; gi.value=165; bi.value=0;}
	else if (color == "yellow")	{ri.value=255; gi.value=255; bi.value=0;}
	else if (color == "white")	{ri.value=255; gi.value=255; bi.value=255;}
	ready(); test1.stroke();test1.draw(); test.draw(ctx,parseInt(size.value)); showRenders();
}

function changeAlgorithm(sel)
{
	var frac = sel.options[sel.selectedIndex].value;
	switch (frac)
	{
		case "mandelbrot" :
			initTest1();
			test1.mandelbrot();
			test.mandelbrot();
			goDefault();
			ready();go();
			
		 break;
		case "tricorn" :
			initTest1();
			cS.value = -1;
			test1.mandelbrot(-1);
			test.mandelbrot(-1);
			goDefault();
			ready();go();
		 break;
		case "terrain" :
			initTest1();
			test1.terrain();
			test.terrain(40,0.5,1);
			aS.value = 40;
			bS.value = 0.5;
			cS.value = 1;
			dS.value = 'n/a';
			j.value = 'n/a';
			j1.value = 'n/a';
			j2.value = 'n/a';
			goDefault();
			ready();go();
		 break;
		case "plasma":
			test1.plasma();
			test.toRGB(255,255,255);
			test.plasma();
			goDefault();
			ready();go();
			break;
		case "julia1" :
			initTest1();
			j.value = 0;
			j1.value=phi-2;
			j2.value=phi-1;
			test1.julia(phi-2,phi-1);
			test.julia(phi-2,phi-1);
			goDefault();
			ready();go();
		 break;
		case "julia2" :
			initTest1();
			j.value = 0;
			j1.value=1-phi;
			j2.value=0;
			test1.julia(1-phi,0);
			test.julia(1-phi,0);
			goDefault();
			ready();go();
		 break;
		case "julia3" :
			initTest1();
			j.value = 0; 
			j1.value=0.285;
			j2.value=0;
			test1.julia(0.285,0);
			test.julia(0.285,0);
			goDefault();
			ready();go();
		 break;
		case "julia4" :
			initTest1();
			j.value = 0;
			j1.value=0.285;
			j2.value=0.01;
			test1.julia(0.285,0.01);
			test.julia(0.285,0.01);
			goDefault();
			ready();go();
		 break;
		case "julia5" :
			initTest1();
			j.value = 0;
			j1.value=-0.835;
			j2.value=-0.2321;
			test1.julia(-0.835, -0.2321);
			test.julia(-0.835, -0.2321);
			goDefault();
			ready();go();
		 break;
	}
}

</script>
</br>




</body></html>

